{"version":3,"file":"static/js/349.94fe79e9.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n        <img style={\n                {\n                    display: 'block',\n                    width: '250px',\n                    height: '250px',\n                    objectFit: 'contain',\n                    margin: '0 auto'\n                }\n            } \n            src={img} \n            alt=\"error\" \n        />\n    )\n}\n\nexport default ErrorMessage;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(150);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended =  false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8)\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            const {title, thumbnail, price, id} = item;\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button className=\"button button__main button__long\"\n                     disabled={newItemLoading}\n                     style={{'display': comicsEnded ? 'none' : 'block'}}\n                     onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n\n    return (\n        <>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request  = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data =  await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return{loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=33c17539858fd8200918eb1fb94ca45f';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        let description = '';\n\n        char.description.length > 220 ? description = char.description.slice(0, 220) + '...' : description = char.description;\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description ? description : 'There is no description for this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic,}\n}\n\nexport default useMarvelService;\n\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","title","thumbnail","price","id","Link","to","concat","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformComics","comics","_comics$textObjects$","path","extension","description","pageCount","language","textObjects","prices","_transformCharacter","char","slice","name","homepage","urls","wiki","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}