{"version":3,"file":"static/js/895.55067b72.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n        <img style={\n                {\n                    display: 'block',\n                    width: '250px',\n                    height: '250px',\n                    objectFit: 'contain',\n                    margin: '0 auto'\n                }\n            } \n            src={img} \n            alt=\"error\" \n        />\n    )\n}\n\nexport default ErrorMessage;","import {useEffect, useState} from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    \n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} \n                 alt=\"Random character\" \n                 className=\"randomchar__img\"\n                 style={{objectFit: thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? 'fill' : 'cover'}}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","/* eslint-disable react-hooks/exhaustive-deps */\nimport {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended =  false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9)\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            const {name, thumbnail, id} = item;\n            return (\n                <li \n                    tabIndex={0}\n                    className=\"char__item\"\n                    key={id}\n                    ref={el => itemRefs.current[i] = el}\n                    onClick={() => {\n                        props.onCharSelected(id)\n                        focusOnItem(i);\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                           focusOnItem(i);\n                        }\n                    }}>\n                        <img \n                            src={thumbnail} \n                            alt={name} \n                            style={{objectFit: thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? 'fill' : 'cover'}}\n                        />\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n     \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return ( \n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton =  char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    return (\n        <>\n             <div className=\"char__basics\">\n                    <img \n                        src={thumbnail} \n                        alt={name}\n                        style={{objectFit: thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? 'fill' : 'cover'}}\n                    />\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    comics.length > 0 ? comics.map((item, i) => {\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${item.resourceURI.slice(-5)}`}>{item.name}</Link>\n                            </li>\n\n                        )\n                    }) : 'There are no comics for this character.'\n                }\n            </ul>\n        </>  \n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","/* eslint-disable no-unused-vars */\nimport { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    // static getDerivedStateFromError(error) {\n    //     return {error: true};\n    // }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setSelectedChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setSelectedChar(id);\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request  = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data =  await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return{loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=33c17539858fd8200918eb1fb94ca45f';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        let description = '';\n\n        char.description.length > 220 ? description = char.description.slice(0, 220) + '...' : description = char.description;\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description ? description : 'There is no description for this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic,}\n}\n\nexport default useMarvelService;\n\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","Skeleton","_Fragment","comics","Link","to","concat","resourceURI","slice","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","setSelectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformComics","_comics$textObjects$","title","path","extension","pageCount","language","textObjects","price","prices","_transformCharacter","urls","results","res","getAllComics","getComic"],"sourceRoot":""}