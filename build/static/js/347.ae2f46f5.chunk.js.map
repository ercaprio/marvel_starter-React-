{"version":3,"file":"static/js/347.ae2f46f5.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/singleComicPage/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n        <img style={\n                {\n                    display: 'block',\n                    width: '250px',\n                    height: '250px',\n                    objectFit: 'contain',\n                    margin: '0 auto'\n                }\n            } \n            src={img} \n            alt=\"error\" \n        />\n    )\n}\n\nexport default ErrorMessage;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\n\nimport Spinner from '../../spinner/Spinner';\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\nimport useMarvelService from '../../../services/MarvelService';\n\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n    const {comicId} = useParams();\n    const [comic, setComic] = useState(null);\n\n    const {loading, error, getComic, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateComic();\n    }, [comicId])\n\n    const updateComic = () => {\n        clearError();\n        getComic(comicId)\n            .then(onComicLoaded)\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    const {title, description, pageCount, thumbnail, language, price} = comic;\n\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">Language: {language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <div onClick={() => navigate(-1)} className=\"single-comic__back\">Back to all</div>\n        </div>\n    )\n}\n\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request  = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data =  await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return{loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=33c17539858fd8200918eb1fb94ca45f';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        let description = '';\n\n        char.description.length > 220 ? description = char.description.slice(0, 220) + '...' : description = char.description;\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description ? description : 'There is no description for this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic,}\n}\n\nexport default useMarvelService;\n\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","navigate","useNavigate","_jsxs","className","children","onClick","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformComics","comics","_comics$textObjects$","id","path","extension","textObjects","prices","_transformCharacter","char","slice","name","homepage","urls","wiki","items","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}